class FrontendI18n { constructor() { this.currentLanguage = localStorage.getItem('language') || 'en'; this.translations = {}; this.languageNames = { 'en': 'EN', 'es': 'ES', 'fr': 'FR', 'de': 'DE', 'it': 'IT', 'pt': 'PT', 'ru': 'RU', 'ja': 'JP', 'ko': 'KR', 'zh': 'CN' }; this.init(); } async init() { await this.loadTranslations(this.currentLanguage); this.updateLanguageButton(); this.translatePage(); this.setupEventListeners(); } async loadTranslations(languageCode) { try { const response = await fetch(`/api/i18n/translations/${languageCode}`); const data = await response.json(); if (data.success) { this.translations = data.translations; return true; } else { console.warn(`Failed to load translations for ${languageCode}:`, data.message); return false; } } catch (error) { console.error(`Error loading translations for ${languageCode}:`, error); return false; } } setupEventListeners() { const languageToggle = document.getElementById('languageToggle'); const languageDropdown = document.getElementById('languageDropdown'); if (languageToggle && languageDropdown) { languageToggle.addEventListener('click', (e) => { e.stopPropagation(); languageDropdown.classList.toggle('hidden'); }); document.addEventListener('click', () => { languageDropdown.classList.add('hidden'); }); const languageOptions = document.querySelectorAll('.language-option'); languageOptions.forEach(option => { option.addEventListener('click', async (e) => { e.stopPropagation(); const newLanguage = option.dataset.lang; await this.changeLanguage(newLanguage); languageDropdown.classList.add('hidden'); }); }); } } async changeLanguage(languageCode) { try { this.showLoadingState(); const loaded = await this.loadTranslations(languageCode); if (loaded) { this.currentLanguage = languageCode; localStorage.setItem('language', languageCode); this.updateLanguageButton(); this.translatePage(); this.saveUserLanguagePreference(languageCode); console.log(`Language changed to: ${languageCode}`); } else { this.showError('Failed to load language pack'); } } catch (error) { console.error('Error changing language:', error); this.showError('Error changing language'); } finally { this.hideLoadingState(); } } translatePage() { const elements = document.querySelectorAll('[data-i18n]'); elements.forEach(element => { const key = element.dataset.i18n; const translation = this.getTranslation(key); if (translation) { if (element.tagName === 'INPUT' && (element.type === 'submit' || element.type === 'button')) { element.value = translation; } else if (element.tagName === 'INPUT' && element.placeholder !== undefined) { element.placeholder = translation; } else { element.textContent = translation; } } }); } getTranslation(key) { const keys = key.split('.'); let value = this.translations; for (const k of keys) { if (value && typeof value === 'object' && k in value) { value = value[k]; } else { console.warn(`Translation not found for key: ${key}`); return null; } } return value; } updateLanguageButton() { const languageText = document.getElementById('languageText'); if (languageText) { languageText.textContent = this.languageNames[this.currentLanguage] || 'EN'; } const languageOptions = document.querySelectorAll('.language-option'); languageOptions.forEach(option => { if (option.dataset.lang === this.currentLanguage) { option.style.backgroundColor = '#f3f4f6'; option.style.fontWeight = 'bold'; } else { option.style.backgroundColor = ''; option.style.fontWeight = ''; } }); } async saveUserLanguagePreference(languageCode) { try { const token = localStorage.getItem('token'); if (token) { await fetch('/api/i18n/user/language', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify({ language: languageCode }) }); } } catch (error) { console.warn('Could not save language preference:', error); } } showLoadingState() { const languageText = document.getElementById('languageText'); if (languageText) { languageText.textContent = '...'; } } hideLoadingState() { this.updateLanguageButton(); } showError(message) { const notification = document.createElement('div'); notification.className = 'fixed top-20 right-4 bg-red-100 border-2 border-red-500 text-red-800 p-4 z-50 font-mono text-sm'; notification.style.boxShadow = '4px 4px 0px 0px #dc2626'; notification.textContent = message; document.body.appendChild(notification); setTimeout(() => { if (notification.parentNode) { notification.parentNode.removeChild(notification); } }, 3000); } translate(key) { return this.getTranslation(key) || key; } getCurrentLanguage() { return this.currentLanguage; } } document.addEventListener('DOMContentLoaded', () => { window.i18n = new FrontendI18n(); }); if (typeof module !== 'undefined' && module.exports) { module.exports = FrontendI18n; }