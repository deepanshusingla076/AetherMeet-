if (!window.authInitialized) { window.authInitialized = true; const loginBtn2 = document.getElementById('loginBtn2'); const registerBtn = document.getElementById('registerBtn'); const headerLoginBtn = document.getElementById('headerLoginBtn'); const headerGetStartedBtn = document.getElementById('headerGetStartedBtn'); const footerLoginBtn = document.getElementById('footerLoginBtn'); const footerRegisterBtn = document.getElementById('footerRegisterBtn'); const loginModal = document.getElementById('loginModal'); const registerModal = document.getElementById('registerModal'); const loginForm = document.getElementById('loginForm'); const registerForm = document.getElementById('registerForm'); const loginError = document.getElementById('loginError'); const registerError = document.getElementById('registerError'); if (loginModal && registerModal) { if (localStorage.getItem('token') && window.location.pathname === '/') { window.location.href = '/dashboard'; } function openModal(modal) { modal.classList.remove('hidden'); } function closeModal(modal) { modal.classList.add('hidden'); const errorDiv = modal.querySelector('.hidden'); if (errorDiv && errorDiv.classList.contains('bg-red-100')) { errorDiv.classList.add('hidden'); errorDiv.textContent = ''; } } if (loginBtn2) loginBtn2.addEventListener('click', () => openModal(loginModal)); if (registerBtn) registerBtn.addEventListener('click', () => openModal(registerModal)); if (headerLoginBtn) headerLoginBtn.addEventListener('click', () => openModal(loginModal)); if (footerLoginBtn) footerLoginBtn.addEventListener('click', () => openModal(loginModal)); if (footerRegisterBtn) footerRegisterBtn.addEventListener('click', () => openModal(registerModal)); document.addEventListener('click', (e) => { if (e.target.classList.contains('close')) { closeModal(e.target.closest('.fixed')); } if (e.target.classList.contains('fixed') && e.target.classList.contains('inset-0')) { closeModal(e.target); } }); loginForm.addEventListener('submit', async (e) => { e.preventDefault(); const username = document.getElementById('loginUsername').value; const password = document.getElementById('loginPassword').value; try { const response = await fetch('/api/auth/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, password }) }); const data = await response.json(); if (data.success) { localStorage.setItem('token', data.token); localStorage.setItem('user', JSON.stringify(data.user)); localStorage.setItem('tokenExpiry', data.expiresAt); setupAutoLogout(data.expiresAt); if (window.pendingRoomCode && window.pendingRoomCode.trim()) { window.location.href = `/dashboard?roomCode=${window.pendingRoomCode}`; } else { window.location.href = '/dashboard'; } } else { showError(loginError, data.message); } } catch (error) { console.error('Login error:', error); showError(loginError, 'An error occurred during login. Please try again.'); } }); registerForm.addEventListener('submit', async (e) => { e.preventDefault(); const username = document.getElementById('registerUsername').value; const email = document.getElementById('registerEmail').value; const password = document.getElementById('registerPassword').value; if (password.length < 6) { showError(registerError, 'Password must be at least 6 characters long.'); return; } try { const response = await fetch('/api/auth/register', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, email, password }) }); const data = await response.json(); if (data.success) { localStorage.setItem('token', data.token); localStorage.setItem('user', JSON.stringify(data.user)); localStorage.setItem('tokenExpiry', data.expiresAt); setupAutoLogout(data.expiresAt); if (window.pendingRoomCode && window.pendingRoomCode.trim()) { window.location.href = `/dashboard?roomCode=${window.pendingRoomCode}`; } else { window.location.href = '/dashboard'; } } else { showError(registerError, data.message); } } catch (error) { console.error('Registration error:', error); showError(registerError, 'An error occurred during registration. Please try again.'); } }); } function showError(errorElement, message) { if (errorElement) { errorElement.textContent = message; errorElement.classList.remove('hidden'); } } function logout() { const token = localStorage.getItem('token'); if (token) { fetch('/api/auth/logout', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }).then(() => { clearSession(); }).catch(() => { clearSession(); }); } else { clearSession(); } } function clearSession() { localStorage.removeItem('token'); localStorage.removeItem('user'); localStorage.removeItem('tokenExpiry'); if (window.autoLogoutTimer) { clearTimeout(window.autoLogoutTimer); } window.location.href = '/'; } function setupAutoLogout(expiresAt) { if (!expiresAt) return; const expirationTime = new Date(expiresAt).getTime(); const currentTime = Date.now(); const timeUntilExpiry = expirationTime - currentTime; if (timeUntilExpiry <= 0) { clearSession(); return; } const logoutTime = Math.max(timeUntilExpiry - 30000, 1000); window.autoLogoutTimer = setTimeout(() => { showLogoutWarning(); }, logoutTime); } function showLogoutWarning() { const shouldStayLoggedIn = confirm('Your session is about to expire. Click OK to extend your session, or Cancel to logout.'); if (shouldStayLoggedIn) { refreshToken(); } else { logout(); } } function refreshToken() { const token = localStorage.getItem('token'); if (!token) { clearSession(); return; } fetch('/api/auth/refresh', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }) .then(response => response.json()) .then(data => { if (data.success) { localStorage.setItem('token', data.token); localStorage.setItem('tokenExpiry', data.expiresAt); setupAutoLogout(data.expiresAt); } else { clearSession(); } }) .catch(() => { clearSession(); }); } function checkTokenExpiry() { const tokenExpiry = localStorage.getItem('tokenExpiry'); const token = localStorage.getItem('token'); const currentPath = window.location.pathname; const protectedPaths = ['/dashboard', '/room/', '/notes/']; const isProtectedPage = protectedPaths.some(path => currentPath.includes(path)); if (!isProtectedPage) { return; } if (token && tokenExpiry) { const expirationTime = new Date(tokenExpiry).getTime(); const currentTime = Date.now(); if (currentTime >= expirationTime) { clearSession(); } else { setupAutoLogout(tokenExpiry); } } else if (token) { clearSession(); } } if (window.location.pathname !== '/') { checkTokenExpiry(); } window.logout = logout; }