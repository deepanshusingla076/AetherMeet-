const token = localStorage.getItem('token'); const user = JSON.parse(localStorage.getItem('user') || '{}'); if (!token) { window.location.href = '/'; } const welcomeUser = document.getElementById('welcomeUser'); const logoutBtn = document.getElementById('logoutBtn'); const createNoteBtn = document.getElementById('createNoteBtn'); const accessNoteBtn = document.getElementById('accessNoteBtn'); const createNoteModal = document.getElementById('createNoteModal'); const accessNoteModal = document.getElementById('accessNoteModal'); const savePdfModal = document.getElementById('savePdfModal'); const createNoteForm = document.getElementById('createNoteForm'); const accessNoteForm = document.getElementById('accessNoteForm'); const savePdfForm = document.getElementById('savePdfForm'); const createNoteError = document.getElementById('createNoteError'); const accessNoteError = document.getElementById('accessNoteError'); const savePdfError = document.getElementById('savePdfError'); const noteDisplay = document.getElementById('noteDisplay'); const noteTitle = document.getElementById('noteTitle'); const noteContent = document.getElementById('noteContent'); const noteInfo = document.getElementById('noteInfo'); const editNoteBtn = document.getElementById('editNoteBtn'); const deleteNoteBtn = document.getElementById('deleteNoteBtn'); let currentNote = null; let currentPdfData = null; let currentRoomCode = null; document.addEventListener('DOMContentLoaded', () => { welcomeUser.textContent = user.username; const urlParams = new URLSearchParams(window.location.search); if (urlParams.get('action') === 'save-pdf') { const pdfData = sessionStorage.getItem('pendingPdfData'); const roomCode = sessionStorage.getItem('pendingRoomCode'); if (pdfData && roomCode) { currentPdfData = pdfData; currentRoomCode = roomCode; document.getElementById('pdfTitle').value = `Chat Export - Room ${roomCode}`; openModal(savePdfModal); sessionStorage.removeItem('pendingPdfData'); sessionStorage.removeItem('pendingRoomCode'); } } }); function openModal(modal) { modal.classList.remove('hidden'); } function closeModal(modal) { modal.classList.add('hidden'); const errorDiv = modal.querySelector('.bg-red-100'); if (errorDiv) { errorDiv.classList.add('hidden'); errorDiv.textContent = ''; } const form = modal.querySelector('form'); if (form) { form.reset(); } } logoutBtn.addEventListener('click', () => { localStorage.removeItem('token'); localStorage.removeItem('user'); window.location.href = '/'; }); createNoteBtn.addEventListener('click', () => openModal(createNoteModal)); accessNoteBtn.addEventListener('click', () => openModal(accessNoteModal)); document.addEventListener('click', (e) => { if (e.target.classList.contains('close')) { closeModal(e.target.closest('.fixed')); } if (e.target.classList.contains('fixed') && e.target.classList.contains('inset-0')) { closeModal(e.target); } }); createNoteForm.addEventListener('submit', async (e) => { e.preventDefault(); const formData = new FormData(createNoteForm); const noteData = Object.fromEntries(formData); try { const response = await fetch('/api/notes/create', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(noteData) }); const data = await response.json(); if (data.success) { alert(`Note created successfully! Note Code: ${data.note.noteCode}`); closeModal(createNoteModal); createNoteForm.reset(); } else { showError(createNoteError, data.message); } } catch (error) { console.error('Note creation error:', error); showError(createNoteError, 'An error occurred while creating the note.'); } }); accessNoteForm.addEventListener('submit', async (e) => { e.preventDefault(); const formData = new FormData(accessNoteForm); const accessData = Object.fromEntries(formData); try { const response = await fetch(`/api/notes/${accessData.noteCode}/access`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify({ primaryPassword: accessData.primaryPassword, secondaryPassword: accessData.secondaryPassword }) }); const data = await response.json(); if (data.success) { currentNote = data.note; displayNote(data.note); closeModal(accessNoteModal); } else { showError(accessNoteError, data.message); } } catch (error) { console.error('Note access error:', error); showError(accessNoteError, 'An error occurred while accessing the note.'); } }); savePdfForm.addEventListener('submit', async (e) => { e.preventDefault(); if (!currentPdfData) { showError(savePdfError, 'No PDF data to save.'); return; } const formData = new FormData(savePdfForm); const saveData = Object.fromEntries(formData); saveData.pdfData = currentPdfData; saveData.roomCode = currentRoomCode; try { const response = await fetch('/api/notes/save-pdf', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(saveData) }); const data = await response.json(); if (data.success) { alert(`PDF saved to notes successfully! Note Code: ${data.note.noteCode}`); closeModal(savePdfModal); currentPdfData = null; currentRoomCode = null; } else { showError(savePdfError, data.message); } } catch (error) { console.error('PDF save error:', error); showError(savePdfError, 'An error occurred while saving the PDF.'); } }); document.getElementById('cancelPdfSave').addEventListener('click', () => { closeModal(savePdfModal); currentPdfData = null; currentRoomCode = null; }); function displayNote(note) { noteTitle.textContent = note.title; document.getElementById('noteContent').textContent = note.content; noteInfo.textContent = `Code: ${note.noteCode} | Type: ${note.noteType.toUpperCase()} | Created: ${new Date(note.createdAt).toLocaleString()} | Updated: ${new Date(note.updatedAt).toLocaleString()}`; noteDisplay.classList.remove('hidden'); noteDisplay.scrollIntoView({ behavior: 'smooth' }); } editNoteBtn.addEventListener('click', () => { if (currentNote) { alert('Edit functionality coming soon! For now, you can create a new note with updated content.'); } }); deleteNoteBtn.addEventListener('click', () => { if (currentNote) { if (confirm(`Are you sure you want to delete the note "${currentNote.title}"? This cannot be undone.`)) { alert('Delete functionality coming soon! Please contact support if you need urgent deletion.'); } } }); function showError(errorElement, message) { errorElement.textContent = message; errorElement.classList.remove('hidden'); } window.openSavePdfModal = function(pdfData, roomCode) { currentPdfData = pdfData; currentRoomCode = roomCode; document.getElementById('pdfTitle').value = `Chat Export - Room ${roomCode}`; openModal(savePdfModal); };