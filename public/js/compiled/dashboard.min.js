const token = localStorage.getItem('token'); const user = JSON.parse(localStorage.getItem('user') || '{}'); if (!token) { window.location.href = '/'; } const welcomeUser = document.getElementById('welcomeUser'); const logoutBtn = document.getElementById('logoutBtn'); const createInstantBtn = document.getElementById('createInstantBtn'); const createScheduledBtn = document.getElementById('createScheduledBtn'); const joinRoomForm = document.getElementById('joinRoomForm'); const myRoomsList = document.getElementById('myRoomsList'); const instantRoomModal = document.getElementById('instantRoomModal'); const scheduledRoomModal = document.getElementById('scheduledRoomModal'); const joinRoomModal = document.getElementById('joinRoomModal'); const instantRoomForm = document.getElementById('instantRoomForm'); const scheduledRoomForm = document.getElementById('scheduledRoomForm'); const joinRoomPasswordForm = document.getElementById('joinRoomPasswordForm'); const instantRoomError = document.getElementById('instantRoomError'); const scheduledRoomError = document.getElementById('scheduledRoomError'); const joinRoomError = document.getElementById('joinRoomError'); document.addEventListener('DOMContentLoaded', () => { welcomeUser.textContent = `Welcome, ${user.username}!`; loadMyRooms(); const urlParams = new URLSearchParams(window.location.search); const roomCode = urlParams.get('roomCode'); if (roomCode) { document.getElementById('roomCode').value = roomCode.toUpperCase(); checkAndJoinRoom(roomCode.toUpperCase()); } }); async function checkAndJoinRoom(roomCode) { try { const response = await fetch(`/api/rooms/${roomCode}/info`, { method: 'GET', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); const data = await response.json(); if (data.success) { joinRoomPasswordForm.dataset.roomCode = roomCode; openModal(joinRoomModal); } else { alert(data.message || 'Room not found or not active'); } } catch (error) { console.error('Room check error:', error); alert('Failed to check room. Please try again.'); } } logoutBtn.addEventListener('click', async () => { try { await fetch('/api/auth/logout', { method: 'POST', headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' } }); } catch (error) { console.error('Logout error:', error); } finally { localStorage.removeItem('token'); localStorage.removeItem('user'); localStorage.removeItem('tokenExpiry'); window.location.href = '/'; } }); function logout() { localStorage.removeItem('token'); localStorage.removeItem('user'); localStorage.removeItem('tokenExpiry'); window.location.href = '/'; } function openModal(modal) { modal.classList.remove('hidden'); } function closeModal(modal) { modal.classList.add('hidden'); const errorDiv = modal.querySelector('.bg-red-100'); if (errorDiv) { errorDiv.classList.add('hidden'); errorDiv.textContent = ''; } const form = modal.querySelector('form'); if (form) { form.reset(); } } document.addEventListener('click', (e) => { if (e.target.classList.contains('close')) { closeModal(e.target.closest('.fixed')); } if (e.target.classList.contains('fixed') && e.target.classList.contains('inset-0')) { closeModal(e.target); } }); createInstantBtn.addEventListener('click', () => { openModal(instantRoomModal); }); createScheduledBtn.addEventListener('click', () => { openModal(scheduledRoomModal); const now = new Date(); now.setMinutes(now.getMinutes() - now.getTimezoneOffset()); document.getElementById('scheduledTime').min = now.toISOString().slice(0, 16); }); instantRoomForm.addEventListener('submit', async (e) => { e.preventDefault(); const formData = new FormData(instantRoomForm); const roomData = { name: formData.get('name'), description: formData.get('description'), primaryPassword: formData.get('primaryPassword'), secondaryPassword: formData.get('secondaryPassword'), admissionType: formData.get('admissionType') }; try { const response = await fetch('/api/rooms/instant', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(roomData) }); const data = await response.json(); if (data.success) { closeModal(instantRoomModal); alert(`Room created successfully! Room Code: ${data.room.roomCode}`); loadMyRooms(); window.location.href = `/room/${data.room.roomCode}`; } else { showError(instantRoomError, data.message); } } catch (error) { console.error('Room creation error:', error); showError(instantRoomError, 'Failed to create room. Please try again.'); } }); scheduledRoomForm.addEventListener('submit', async (e) => { e.preventDefault(); const formData = new FormData(scheduledRoomForm); const roomData = { name: formData.get('name'), description: formData.get('description'), primaryPassword: formData.get('primaryPassword'), secondaryPassword: formData.get('secondaryPassword'), admissionType: formData.get('admissionType'), scheduledTime: formData.get('scheduledTime') }; const scheduledDate = new Date(roomData.scheduledTime); if (scheduledDate <= new Date()) { showError(scheduledRoomError, 'Scheduled time must be in the future.'); return; } try { const response = await fetch('/api/rooms/schedule', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(roomData) }); const data = await response.json(); if (data.success) { closeModal(scheduledRoomModal); alert(`Room scheduled successfully! Room Code: ${data.room.roomCode}\\nScheduled for: ${new Date(data.room.scheduledTime).toLocaleString()}`); loadMyRooms(); } else { showError(scheduledRoomError, data.message); } } catch (error) { console.error('Room scheduling error:', error); showError(scheduledRoomError, 'Failed to schedule room. Please try again.'); } }); joinRoomForm.addEventListener('submit', async (e) => { e.preventDefault(); const roomCode = document.getElementById('roomCode').value.toUpperCase(); if (roomCode.length !== 6) { alert('Room code must be exactly 6 characters.'); return; } await checkAndJoinRoom(roomCode); }); joinRoomPasswordForm.addEventListener('submit', async (e) => { e.preventDefault(); const formData = new FormData(joinRoomPasswordForm); const joinData = { primaryPassword: formData.get('primaryPassword'), secondaryPassword: formData.get('secondaryPassword') }; const roomCode = joinRoomPasswordForm.dataset.roomCode; try { const response = await fetch(`/api/rooms/${roomCode}/join`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify(joinData) }); const data = await response.json(); if (data.success) { if (data.status === 'joined') { closeModal(joinRoomModal); window.location.href = `/room/${roomCode}`; } else if (data.status === 'pending') { closeModal(joinRoomModal); alert(data.message); } } else { showError(joinRoomError, data.message); } } catch (error) { console.error('Join room error:', error); showError(joinRoomError, 'Failed to join room. Please try again.'); } }); async function loadMyRooms() { try { myRoomsList.innerHTML = ` <div class="bg-gray-100 border-2 border-black p-4" style="box-shadow: 2px 2px 0px 0px #000000;"> <h4 class="font-bold uppercase tracking-wide text-sm">No rooms yet</h4> <p class="text-xs text-gray-600 font-mono mt-1">Create your first room to get started!</p> </div> `; } catch (error) { console.error('Failed to load rooms:', error); myRoomsList.innerHTML = ` <div class="bg-red-100 border-2 border-red-500 p-4 text-red-800" style="box-shadow: 2px 2px 0px 0px #dc2626;"> <p class="font-mono text-sm">Failed to load rooms.</p> </div> `; } } function showError(errorElement, message) { errorElement.textContent = message; errorElement.classList.remove('hidden'); }